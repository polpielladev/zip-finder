{"sections":[{"title":"Workflow: Distributing the app","chapter":"Ship your apps faster with Xcode Cloud","estimatedTimeInMinutes":20,"content":[{"inlineContent":[{"type":"text","text":"Archive and distribute the app for external testing whenever a commit is pushed to a branch with the pattern "},{"type":"codeVoice","code":"release\/{platform}\/{version}"},{"type":"text","text":". The workflow should automatically bump the version of the app based on the branch name, auto-translate the content and then submitting for external testing."}],"type":"paragraph"}],"kind":"hero"},{"tasks":[{"anchor":"Creating-the-bumpversion-lane-in-fastlane","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How to build a fastlane script that pulls out the platform and version information from the current branch, updates the Xcode project’s "},{"code":"MARKETING_VERSION","type":"codeVoice"},{"type":"text","text":" field and pushes the new changes to the branch."}]}],"media":"set-up-xcode-cloud-intro.png","mediaPosition":"trailing"}],"title":"Creating the `bump_version` lane in fastlane","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new bundle at the root of the repository"}]}],"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"set-up-env-01.sh"},{"code":"Gemfile-01.rb","type":"step","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add "},{"code":"fastlane","type":"codeVoice"},{"type":"text","text":" and "},{"code":"xcodeproj","type":"codeVoice"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"Gemfile"},{"text":".","type":"text"}]}],"media":null},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Install all dependencies in the bundle."}]}],"type":"step","code":"set-up-env-02.sh","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Initialise a new fastlane project locally"}],"type":"paragraph"}],"caption":[],"code":"set-up-env-03.sh","type":"step","media":null,"runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Add the "},{"type":"codeVoice","code":"git_status"},{"type":"text","text":" plugin to check what the git diff is on the CI runner."}],"type":"paragraph"}],"type":"step","media":null,"code":"set-up-env-04.sh","caption":[],"runtimePreview":null},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remove all contents of your "},{"type":"codeVoice","code":"Fastfile.rb"},{"text":" file and import the ","type":"text"},{"code":"xcodeproj","type":"codeVoice"},{"type":"text","text":" gem at to the top."}]}],"media":null,"runtimePreview":null,"code":"Fastfile-01.rb"},{"type":"step","runtimePreview":null,"code":"Fastfile-02.rb","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Define a method that will contain the logic to update the ","type":"text"},{"code":"MARKETING_VERSION","type":"codeVoice"},{"type":"text","text":" based on teh platform."}]}],"media":null},{"code":"Fastfile-03.rb","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Open the project using the "},{"code":"xcodeproj","type":"codeVoice"},{"type":"text","text":" gem."}],"type":"paragraph"}],"type":"step","media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Select the iOS targets.","type":"text"}]}],"caption":[],"runtimePreview":null,"code":"Fastfile-04.rb","media":null},{"caption":[],"media":null,"code":"Fastfile-05.rb","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Update the "},{"type":"codeVoice","code":"MARKETING_VERSION"},{"type":"text","text":" for all targets."}]}],"runtimePreview":null,"type":"step"},{"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Save the modified project file."}]}],"caption":[],"media":null,"type":"step","code":"Fastfile-06.rb"},{"type":"step","media":null,"code":"Fastfile-07.rb","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create a lane to update the version based on the branch name.","type":"text"}]}]},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Get the branch name from the ","type":"text"},{"type":"codeVoice","code":"CI_BRANCH"},{"text":" environment variable provided by Xcode Cloud.","type":"text"}],"type":"paragraph"}],"media":null,"code":"Fastfile-08.rb","caption":[],"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Pull out the right components from the branch name and update the Xcode project files with the method we created earlier."}],"type":"paragraph"}],"code":"Fastfile-09.rb","runtimePreview":null,"type":"step","caption":[],"media":null},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the version has changed push the changes to "},{"type":"codeVoice","code":".xcodeproj"},{"type":"text","text":" to the branch."}]}],"runtimePreview":null,"caption":[],"code":"Fastfile-10.rb"}]},{"title":"Running the Fastlane lane at the right times","anchor":"Running-the-Fastlane-lane-at-the-right-times","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"How to use Xcode Cloud’s ","type":"text"},{"code":"ci_scripts","type":"codeVoice"},{"text":" to install all bundle dependencies and run the fastlane lane after the repository is cloned.","type":"text"}]}],"kind":"contentAndMedia","media":"set-up-xcode-cloud-intro.png"}],"stepsSection":[{"caption":[],"media":null,"code":"ci-post-clone-create-01.sh","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"First, create a ","type":"text"},{"code":"ci_scripts","type":"codeVoice"},{"type":"text","text":" directory at the root of the repository. Xcode Cloud looks for files with specific names in this directory to run scripts at different times during the workflow."}],"type":"paragraph"}]},{"runtimePreview":null,"type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Create a file called "},{"type":"codeVoice","code":"ci_post_clone.sh"},{"text":". The name must be exactly this so that Xcode Cloud can find and knows that it has to run it directly after cloning the repository.","type":"text"}],"type":"paragraph"}],"code":"ci-post-clone-create-02.sh","media":null},{"runtimePreview":null,"caption":[],"media":null,"code":"ci-post-clone-create-03.sh","type":"step","content":[{"inlineContent":[{"text":"Make the file executable so that Xcode Cloud can run it.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Write a shell shebang in the ","type":"text"},{"type":"codeVoice","code":"ci_post_clone.sh"},{"type":"text","text":" script and then move one directory up. By default, Xcode Cloud runs all "},{"code":"ci_scripts","type":"codeVoice"},{"type":"text","text":" from inside the directory, so we must move up one to be at the root."}],"type":"paragraph"}],"media":null,"caption":[],"type":"step","code":"ci-post-clone-01.sh","runtimePreview":null},{"content":[{"inlineContent":[{"text":"Use Xcode Cloud’s ","type":"text"},{"type":"codeVoice","code":"CI_WORKFLOW"},{"text":" environment variable to determine the name of the workflow and, only if the name is ","type":"text"},{"type":"codeVoice","code":"Release iOS"},{"type":"text","text":", then run the code. It is very important that you do this as the "},{"type":"codeVoice","code":"ci_scripts"},{"type":"text","text":" will run for every single workflow that you have."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"code":"ci-post-clone-02.sh","caption":[],"media":null},{"type":"step","code":"ci-post-clone-03.sh","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Install ","type":"text"},{"code":"rbenv","type":"codeVoice"},{"type":"text","text":", a Ruby version manager, using "},{"code":"Homebrew","type":"codeVoice"},{"text":" and then initialise ","type":"text"},{"code":"rbenv","type":"codeVoice"},{"text":" in the current shell.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"content":[{"inlineContent":[{"text":"Install the desired version of Ruby and select it locally.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"ci-post-clone-04.sh","runtimePreview":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Install all dependencies using "},{"code":"Bundle","type":"codeVoice"},{"text":" and run the ","type":"text"},{"type":"codeVoice","code":"Fastlane"},{"type":"text","text":" lane."}]}],"caption":[],"media":null,"code":"ci-post-clone-05.sh","type":"step","runtimePreview":null}]},{"title":"Creating the Release Workflow","stepsSection":[{"type":"step","media":"manage-workflows.png","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"First, start by navigating to the Report Navigator, tap on the Cloud tab, right-click on the product you want to add a workflow to and then click on ‘Manage Workflows’."}],"type":"paragraph"}],"code":null,"caption":[]},{"caption":[],"code":null,"media":"new-workflow.png","type":"step","content":[{"inlineContent":[{"text":"In the ‘Manage Workflows’ screen, tap on the ‘+’ button at the bottom of the screen and select the product you are adding a new workflow to.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"caption":[{"type":"paragraph","inlineContent":[{"text":"As this workflow will submit a build for External Testing, you must tick the ‘Restrict Editing’ box and only allow Account Holders, Admins and App Managers to edit this workflow.","type":"text"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set up the General section of the workflow with a name and description."}]}],"media":"release-general.png","runtimePreview":null,"type":"step","code":null},{"content":[{"inlineContent":[{"type":"text","text":"Set up the environment section with the Xcode and macOS version aliases you created and used in previous workflows."}],"type":"paragraph"}],"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The workflow will be updating the project’s version and pushing the changes to the release branch, so you will need to provide a GitHub token that has write rights to the repository. You can do so by adding a new environment variable and checking the ‘secret’ box."}]}],"media":"release-environment.png","code":null,"runtimePreview":null},{"caption":[{"type":"paragraph","inlineContent":[{"text":"To avoid multiple duplicate pushes, set a custom condition to not start the workflow if a file matching ","type":"text"},{"type":"codeVoice","code":".project-version"},{"type":"text","text":", which is pushed together with the version bump in the Fastlane lane, is modified and tick the box to ‘Auto-cancel builds’."}]}],"code":null,"content":[{"inlineContent":[{"text":"Modify the existing ‘Branch Changes’ action and set the workflow to only be triggered on pushes to branches matching the ","type":"text"},{"type":"codeVoice","code":"release\/iOS\/*"},{"text":" pattern.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":"release-branch-changes.png"},{"runtimePreview":null,"caption":[],"media":"release-add-action-archive.png","type":"step","code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add an action to archive the application."}]}]},{"runtimePreview":null,"media":"release-archive.png","code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set up the archive action with the scheme you want to generate an artifact for and select the ‘App Store Connect’ distribution preparation option."}]}],"type":"step","caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"Add a post-action to release the artifact for external testing."}],"type":"paragraph"}],"media":"release-add-action-external-testing.png","caption":[],"runtimePreview":null,"code":null,"type":"step"},{"runtimePreview":null,"type":"step","code":null,"content":[{"inlineContent":[{"text":"Select the artifact from the previous step, select a group to submit the build to and click ‘Save’.","type":"text"}],"type":"paragraph"}],"caption":[],"media":"release-external-testing.png"}],"anchor":"Creating-the-Release-Workflow","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","media":"set-up-xcode-cloud-intro.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating an Xcode Cloud workflow that gets triggered whenever a new commit is pushed to a branch with the "},{"type":"codeVoice","code":"release\/{platform}\/{version}"},{"text":" format and distributes to App Store Connect users for External Testing","type":"text"}]}]}]},{"anchor":"Uploading-Release-Notes","stepsSection":[{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Create a TestFlight directory where you will add all the localized release notes files."}],"type":"paragraph"}],"code":"whats-new-01.sh","runtimePreview":null,"type":"step","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file for the "},{"type":"codeVoice","code":"en-US"},{"type":"text","text":" locale and add some content to it."}]}],"media":null,"code":"whats-new-02.sh","caption":[],"runtimePreview":null,"type":"step"},{"type":"step","caption":[],"code":"whats-new-03.sh","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Create a new file for the "},{"code":"es-ES","type":"codeVoice"},{"text":" locale and add some content to it.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":null,"caption":[],"type":"step","content":[{"inlineContent":[{"text":"That’s it! Next time you run the release workflow, the release notes will be uploaded.","type":"text"}],"type":"paragraph"}],"media":null,"code":null}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","media":"set-up-xcode-cloud-intro.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How to use Xcode Cloud to upload Release Notes for multiple locales"}]}]}],"title":"Uploading Release Notes"}],"kind":"tasks"}],"hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Setting-Up-Xcode-Cloud","sections":[{"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Setting-Up-Xcode-Cloud#Setting-up-Xcode-Cloud","kind":"task"}]},{"sections":[{"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Changes-To-Main#Creating-the-workflow-in-Xcode","kind":"task"}],"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Changes-To-Main"},{"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Nightly-Build","sections":[{"kind":"task","reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Nightly-Build#Creating-the-workflow"}]},{"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow","sections":[{"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow#Creating-the-bumpversion-lane-in-fastlane","kind":"task"},{"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow#Running-the-Fastlane-lane-at-the-right-times","kind":"task"},{"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow#Creating-the-Release-Workflow","kind":"task"},{"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow#Uploading-Release-Notes","kind":"task"}]}],"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/XcodeCloud\/Ship-your-apps-faster-with-Xcode-Cloud"}],"paths":[["doc:\/\/dev.polpiella.ZipFinder\/tutorials\/XcodeCloud","doc:\/\/dev.polpiella.ZipFinder\/tutorials\/XcodeCloud\/$volume","doc:\/\/dev.polpiella.ZipFinder\/tutorials\/XcodeCloud\/Ship-your-apps-faster-with-Xcode-Cloud"]],"reference":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/XcodeCloud"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/zipfinder:-zip-code-lookup\/release-workflow"]}],"identifier":{"url":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"categoryPathComponent":"XcodeCloud","role":"project","category":"XcodeCloud","title":"Workflow: Distributing the app"},"kind":"project","references":{"doc://dev.polpiella.ZipFinder/tutorials/XcodeCloud":{"kind":"overview","title":"Ship your apps faster with Xcode Cloud","abstract":[{"text":"Archive, upload and distribute your apps faster with Xcode Cloud.","type":"text"}],"type":"topic","role":"overview","identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/XcodeCloud","url":"\/tutorials\/xcodecloud"},"release-branch-changes.png":{"identifier":"release-branch-changes.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/release-branch-changes.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/dev.polpiella.ZipFinder\/release-branch-changes~dark.png"}]},"Gemfile-01.rb":{"type":"file","identifier":"Gemfile-01.rb","content":["# frozen_string_literal: true","","source \"https:\/\/rubygems.org\"","","gem \"fastlane\"","gem \"xcodeproj\""],"fileName":"Gemfile","syntax":"","highlights":[],"fileType":""},"whats-new-01.sh":{"identifier":"whats-new-01.sh","fileType":"sh","type":"file","highlights":[],"fileName":"Terminal.sh","syntax":"sh","content":["mkdir TestFlight"]},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Changes-To-Main#Creating-the-workflow-in-Xcode":{"abstract":[{"type":"text","text":"Build and test an application every single time that a commit is pushed to the main branch of the repository or every time a commit is pushed to a Pull Request that targets the main branch."}],"identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Changes-To-Main#Creating-the-workflow-in-Xcode","title":"Creating the workflow in Xcode","type":"section","url":"\/tutorials\/zipfinder:-zip-code-lookup\/changes-to-main#Creating-the-workflow-in-Xcode","kind":"section","role":"pseudoSymbol"},"ci-post-clone-02.sh":{"type":"file","identifier":"ci-post-clone-02.sh","content":["#!\/bin\/sh","","cd ..","","if [ \"$CI_WORKFLOW\" == \"Release iOS\" ]; then","fi"],"fileName":"ci_post_clone.sh","syntax":"sh","highlights":[{"line":4},{"line":5},{"line":6}],"fileType":"sh"},"Fastfile-09.rb":{"identifier":"Fastfile-09.rb","fileType":"rb","type":"file","highlights":[{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"fileName":"Fastfile.rb","syntax":"rb","content":["fastlane_require 'xcodeproj'","","def set_all_xcodeproj_version_numbers(version_number, platform)","    project = Xcodeproj::Project.open('..\/ZipFinder.xcodeproj')","    targets = project.targets","    if platform == \"ios\"","      targets = targets.select { |target| target.name == \"ZipFinder\" }","    else","      UI.user_error!(\"Invalid platform: #{platform}, allowed values are: macos\")","    end","","    targets.each do |target|","      target.build_configurations.each do |config|","        config.build_settings[\"MARKETING_VERSION\"] = version_number","      end","    end","    project.save","end","","desc \"Updates the app's `MARKETING_VERSION` based on the branch name if needed.\"","lane :update_version_number_if_needed do","  split_git_ref = ENV[\"CI_BRANCH\"].split(\"\/\", -1)","  ","  if split_git_ref.length != 3","    UI.user_error!(\"Invalid branch name: #{ENV[\"CI_BRANCH\"]}, expected format: release\/{platform}\/{version}\")","  end","","  version_number = split_git_ref.last","  platform = split_git_ref[1]","  set_all_xcodeproj_version_numbers(version_number, platform.downcase)","end"]},"release-general.png":{"identifier":"release-general.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/release-general.png","traits":["1x","light"]},{"url":"\/images\/dev.polpiella.ZipFinder\/release-general~dark.png","traits":["1x","dark"]}]},"Fastfile-04.rb":{"syntax":"rb","content":["fastlane_require 'xcodeproj'","","def set_all_xcodeproj_version_numbers(version_number, platform)","    project = Xcodeproj::Project.open('..\/ZipFinder.xcodeproj')","    targets = project.targets","    if platform == \"ios\"","      targets = targets.select { |target| target.name == \"ZipFinder\" }","    else","      UI.user_error!(\"Invalid platform: #{platform}, allowed values are: macos\")","    end","end"],"type":"file","fileName":"Fastfile.rb","identifier":"Fastfile-04.rb","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"fileType":"rb"},"ci-post-clone-create-02.sh":{"type":"file","identifier":"ci-post-clone-create-02.sh","content":["mkdir ci_scripts","cd ci_scripts && touch ci_post_clone.sh"],"fileName":"Terminal.sh","syntax":"sh","highlights":[{"line":2}],"fileType":"sh"},"whats-new-02.sh":{"identifier":"whats-new-02.sh","fileType":"sh","type":"file","highlights":[{"line":2},{"line":3}],"fileName":"Terminal.sh","syntax":"sh","content":["mkdir TestFlight","","echo \"Bug fixes and improvements\" > TestFlight\/WhatToTest.en-US.txt"]},"set-up-env-03.sh":{"type":"file","identifier":"set-up-env-03.sh","content":["bundle init","","bundle install","","bundle exec fastlane init"],"fileName":"Terminal.sh","syntax":"sh","highlights":[{"line":4},{"line":5}],"fileType":"sh"},"Fastfile-03.rb":{"identifier":"Fastfile-03.rb","fileType":"rb","type":"file","highlights":[{"line":4}],"fileName":"Fastfile.rb","syntax":"rb","content":["fastlane_require 'xcodeproj'","","def set_all_xcodeproj_version_numbers(version_number, platform)","    project = Xcodeproj::Project.open('..\/ZipFinder.xcodeproj')","end"]},"ci-post-clone-01.sh":{"type":"file","identifier":"ci-post-clone-01.sh","content":["#!\/bin\/sh","","cd .."],"fileName":"ci_post_clone.sh","syntax":"sh","highlights":[],"fileType":"sh"},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Nightly-Build#Creating-the-workflow":{"abstract":[{"type":"text","text":"Archive, test, analyze and submit your app for internal testing at midnight every night from the main branch."}],"title":"Creating the workflow","identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Nightly-Build#Creating-the-workflow","url":"\/tutorials\/zipfinder:-zip-code-lookup\/nightly-build#Creating-the-workflow","kind":"section","type":"section","role":"pseudoSymbol"},"set-up-env-01.sh":{"identifier":"set-up-env-01.sh","fileType":"sh","type":"file","highlights":[],"fileName":"Terminal.sh","syntax":"sh","content":["bundle init",""]},"Fastfile-06.rb":{"type":"file","identifier":"Fastfile-06.rb","content":["fastlane_require 'xcodeproj'","","def set_all_xcodeproj_version_numbers(version_number, platform)","    project = Xcodeproj::Project.open('..\/ZipFinder.xcodeproj')","    targets = project.targets","    if platform == \"ios\"","      targets = targets.select { |target| target.name == \"ZipFinder\" }","    else","      UI.user_error!(\"Invalid platform: #{platform}, allowed values are: macos\")","    end","","    targets.each do |target|","      target.build_configurations.each do |config|","        config.build_settings[\"MARKETING_VERSION\"] = version_number","      end","    end","    project.save","end"],"fileName":"Fastfile.rb","syntax":"rb","highlights":[{"line":17}],"fileType":"rb"},"ci-post-clone-03.sh":{"identifier":"ci-post-clone-03.sh","fileType":"sh","type":"file","highlights":[{"line":6},{"line":7}],"fileName":"ci_post_clone.sh","syntax":"sh","content":["#!\/bin\/sh","","cd ..","","if [ \"$CI_WORKFLOW\" == \"Release iOS\" ]; then","    brew install rbenv","    eval \"$(rbenv init - --no-rehash zsh)\"","fi"]},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Release-Workflow#Running-the-Fastlane-lane-at-the-right-times":{"kind":"section","identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow#Running-the-Fastlane-lane-at-the-right-times","role":"pseudoSymbol","type":"section","url":"\/tutorials\/zipfinder:-zip-code-lookup\/release-workflow#Running-the-Fastlane-lane-at-the-right-times","title":"Running the Fastlane lane at the right times","abstract":[{"type":"text","text":"Archive and distribute the app for external testing whenever a commit is pushed to a branch with the pattern "},{"code":"release\/{platform}\/{version}","type":"codeVoice"},{"type":"text","text":". The workflow should automatically bump the version of the app based on the branch name, auto-translate the content and then submitting for external testing."}]},"Fastfile-05.rb":{"type":"file","identifier":"Fastfile-05.rb","content":["fastlane_require 'xcodeproj'","","def set_all_xcodeproj_version_numbers(version_number, platform)","    project = Xcodeproj::Project.open('..\/ZipFinder.xcodeproj')","    targets = project.targets","    if platform == \"ios\"","      targets = targets.select { |target| target.name == \"ZipFinder\" }","    else","      UI.user_error!(\"Invalid platform: #{platform}, allowed values are: macos\")","    end","","    targets.each do |target|","      target.build_configurations.each do |config|","        config.build_settings[\"MARKETING_VERSION\"] = version_number","      end","    end","end"],"fileName":"Fastfile.rb","syntax":"rb","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"fileType":"rb"},"ci-post-clone-04.sh":{"type":"file","syntax":"sh","fileType":"sh","identifier":"ci-post-clone-04.sh","highlights":[{"line":8},{"line":9}],"fileName":"ci_post_clone.sh","content":["#!\/bin\/sh","","cd ..","","if [ \"$CI_WORKFLOW\" == \"Release iOS\" ]; then","    brew install rbenv","    eval \"$(rbenv init - --no-rehash zsh)\"","    rbenv install 3.1.1","    rbenv local 3.1.1","fi"]},"set-up-xcode-cloud-intro.png":{"identifier":"set-up-xcode-cloud-intro.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/set-up-xcode-cloud-intro.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/dev.polpiella.ZipFinder\/set-up-xcode-cloud-intro~dark.png"}]},"ci-post-clone-create-01.sh":{"identifier":"ci-post-clone-create-01.sh","fileType":"sh","type":"file","highlights":[],"fileName":"Terminal.sh","syntax":"sh","content":["mkdir ci_scripts"]},"release-external-testing.png":{"identifier":"release-external-testing.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/release-external-testing.png","traits":["1x","light"]},{"url":"\/images\/dev.polpiella.ZipFinder\/release-external-testing~dark.png","traits":["1x","dark"]}]},"Fastfile-08.rb":{"identifier":"Fastfile-08.rb","fileType":"rb","type":"file","highlights":[{"line":22}],"fileName":"Fastfile.rb","syntax":"rb","content":["fastlane_require 'xcodeproj'","","def set_all_xcodeproj_version_numbers(version_number, platform)","    project = Xcodeproj::Project.open('..\/ZipFinder.xcodeproj')","    targets = project.targets","    if platform == \"ios\"","      targets = targets.select { |target| target.name == \"ZipFinder\" }","    else","      UI.user_error!(\"Invalid platform: #{platform}, allowed values are: macos\")","    end","","    targets.each do |target|","      target.build_configurations.each do |config|","        config.build_settings[\"MARKETING_VERSION\"] = version_number","      end","    end","    project.save","end","","desc \"Updates the app's `MARKETING_VERSION` based on the branch name if needed.\"","lane :update_version_number_if_needed do","  split_git_ref = ENV[\"CI_BRANCH\"].split(\"\/\", -1)","end"]},"whats-new-03.sh":{"type":"file","identifier":"whats-new-03.sh","content":["mkdir TestFlight","","echo \"Bug fixes and improvements\" > TestFlight\/WhatToTest.en-US.txt","echo \"Correcciones y mejoras\" > TestFlight\/WhatToTest.es-ES.txt"],"fileName":"Terminal.sh","syntax":"sh","highlights":[{"line":4}],"fileType":"sh"},"Fastfile-10.rb":{"identifier":"Fastfile-10.rb","fileType":"rb","type":"file","highlights":[{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43}],"fileName":"Fastfile.rb","syntax":"rb","content":["fastlane_require 'xcodeproj'","","def set_all_xcodeproj_version_numbers(version_number, platform)","    project = Xcodeproj::Project.open('..\/ZipFinder.xcodeproj')","    targets = project.targets","    if platform == \"ios\"","      targets = targets.select { |target| target.name == \"ZipFinder\" }","    else","      UI.user_error!(\"Invalid platform: #{platform}, allowed values are: macos\")","    end","","    targets.each do |target|","      target.build_configurations.each do |config|","        config.build_settings[\"MARKETING_VERSION\"] = version_number","      end","    end","    project.save","end","","desc \"Updates the app's `MARKETING_VERSION` based on the branch name if needed.\"","lane :update_version_number_if_needed do","  split_git_ref = ENV[\"CI_BRANCH\"].split(\"\/\", -1)","  ","  if split_git_ref.length != 3","    UI.user_error!(\"Invalid branch name: #{ENV[\"CI_BRANCH\"]}, expected format: release\/{platform}\/{version}\")","  end","","  version_number = split_git_ref.last","  platform = split_git_ref[1]","  set_all_xcodeproj_version_numbers(version_number, platform.downcase)","  ","  if git_status(path: \"ZipFinder.xcodeproj\/project.pbxproj\").empty?","    puts \"🚀 Nothing to commit, pushing the same version again!\"","  else","    Dir.chdir(\"..\") do","      sh(\"echo #{version_number} >> .project-version\")","      sh(\"git add ZipFinder.xcodeproj\/project.pbxproj .project-version\")","      sh(\"git commit -m '[🚀 release #{platform}] Updating version to: #{version_number}'\")","    ","      # Push with personal access token to enable permissions in Xcode Cloud","      sh(\"git push https:\/\/polpielladev:#{ENV[\"GITHUB_TOKEN\"]}@github.com\/polpielladev\/zip-finder.git\")","    end","  end","end"]},"ci-post-clone-create-03.sh":{"type":"file","identifier":"ci-post-clone-create-03.sh","content":["mkdir ci_scripts","cd ci_scripts && touch ci_post_clone.sh","chmod +x ci_post_clone.sh"],"fileName":"Terminal.sh","syntax":"sh","highlights":[{"line":3}],"fileType":"sh"},"release-add-action-archive.png":{"identifier":"release-add-action-archive.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/release-add-action-archive.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/dev.polpiella.ZipFinder\/release-add-action-archive~dark.png"}]},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Changes-To-Main":{"type":"topic","kind":"project","title":"Workflow: Changes to Main","identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Changes-To-Main","url":"\/tutorials\/zipfinder:-zip-code-lookup\/changes-to-main","role":"project","estimatedTime":"20min","abstract":[{"type":"text","text":"Build and test an application every single time that a commit is pushed to the main branch of the repository or every time a commit is pushed to a Pull Request that targets the main branch."}]},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Release-Workflow#Creating-the-Release-Workflow":{"abstract":[{"type":"text","text":"Archive and distribute the app for external testing whenever a commit is pushed to a branch with the pattern "},{"type":"codeVoice","code":"release\/{platform}\/{version}"},{"type":"text","text":". The workflow should automatically bump the version of the app based on the branch name, auto-translate the content and then submitting for external testing."}],"identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow#Creating-the-Release-Workflow","title":"Creating the Release Workflow","type":"section","url":"\/tutorials\/zipfinder:-zip-code-lookup\/release-workflow#Creating-the-Release-Workflow","kind":"section","role":"pseudoSymbol"},"release-add-action-external-testing.png":{"identifier":"release-add-action-external-testing.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/release-add-action-external-testing.png","traits":["1x","light"]},{"url":"\/images\/dev.polpiella.ZipFinder\/release-add-action-external-testing~dark.png","traits":["1x","dark"]}]},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Nightly-Build":{"abstract":[{"type":"text","text":"Archive, test, analyze and submit your app for internal testing at midnight every night from the main branch."}],"kind":"project","identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Nightly-Build","title":"Workflow: Nightly Build","url":"\/tutorials\/zipfinder:-zip-code-lookup\/nightly-build","role":"project","estimatedTime":"20min","type":"topic"},"release-archive.png":{"identifier":"release-archive.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/release-archive.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/dev.polpiella.ZipFinder\/release-archive~dark.png"}]},"ci-post-clone-05.sh":{"type":"file","fileName":"ci_post_clone.sh","syntax":"sh","content":["#!\/bin\/sh","","cd ..","","if [ \"$CI_WORKFLOW\" == \"Release iOS\" ]; then","    brew install rbenv","    eval \"$(rbenv init - --no-rehash zsh)\"","    rbenv install 3.1.1","    rbenv local 3.1.1","    bundle install","    bundle exec fastlane update_version_number_if_needed","fi"],"fileType":"sh","identifier":"ci-post-clone-05.sh","highlights":[{"line":10},{"line":11}]},"doc://dev.polpiella.ZipFinder/tutorials/XcodeCloud/Ship-your-apps-faster-with-Xcode-Cloud":{"identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/XcodeCloud\/Ship-your-apps-faster-with-Xcode-Cloud","role":"article","title":"Ship your apps faster with Xcode Cloud","url":"\/tutorials\/xcodecloud\/ship-your-apps-faster-with-xcode-cloud","abstract":[],"kind":"article","type":"topic"},"Fastfile-07.rb":{"identifier":"Fastfile-07.rb","fileType":"rb","type":"file","highlights":[{"line":19},{"line":20},{"line":21},{"line":22}],"fileName":"Fastfile.rb","syntax":"rb","content":["fastlane_require 'xcodeproj'","","def set_all_xcodeproj_version_numbers(version_number, platform)","    project = Xcodeproj::Project.open('..\/ZipFinder.xcodeproj')","    targets = project.targets","    if platform == \"ios\"","      targets = targets.select { |target| target.name == \"ZipFinder\" }","    else","      UI.user_error!(\"Invalid platform: #{platform}, allowed values are: macos\")","    end","","    targets.each do |target|","      target.build_configurations.each do |config|","        config.build_settings[\"MARKETING_VERSION\"] = version_number","      end","    end","    project.save","end","","desc \"Updates the app's `MARKETING_VERSION` based on the branch name if needed.\"","lane :update_version_number_if_needed do","end"]},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Release-Workflow#Uploading-Release-Notes":{"kind":"section","identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow#Uploading-Release-Notes","role":"pseudoSymbol","type":"section","url":"\/tutorials\/zipfinder:-zip-code-lookup\/release-workflow#Uploading-Release-Notes","title":"Uploading Release Notes","abstract":[{"type":"text","text":"Archive and distribute the app for external testing whenever a commit is pushed to a branch with the pattern "},{"type":"codeVoice","code":"release\/{platform}\/{version}"},{"type":"text","text":". The workflow should automatically bump the version of the app based on the branch name, auto-translate the content and then submitting for external testing."}]},"set-up-env-04.sh":{"type":"file","identifier":"set-up-env-04.sh","content":["bundle init","","bundle install","","bundle exec fastlane init","bundle exec fastlane add_plugin git_status"],"fileName":"Terminal.sh","syntax":"sh","highlights":[{"line":6}],"fileType":"sh"},"Fastfile-02.rb":{"identifier":"Fastfile-02.rb","fileType":"rb","type":"file","highlights":[{"line":2},{"line":3},{"line":4}],"fileName":"Fastfile.rb","syntax":"rb","content":["fastlane_require 'xcodeproj'","","def set_all_xcodeproj_version_numbers(version_number, platform)","end"]},"release-environment.png":{"identifier":"release-environment.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/release-environment.png","traits":["1x","light"]},{"url":"\/images\/dev.polpiella.ZipFinder\/release-environment~dark.png","traits":["1x","dark"]}]},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Release-Workflow":{"abstract":[{"type":"text","text":"Archive and distribute the app for external testing whenever a commit is pushed to a branch with the pattern "},{"type":"codeVoice","code":"release\/{platform}\/{version}"},{"type":"text","text":". The workflow should automatically bump the version of the app based on the branch name, auto-translate the content and then submitting for external testing."}],"identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow","estimatedTime":"20min","title":"Workflow: Distributing the app","type":"topic","url":"\/tutorials\/zipfinder:-zip-code-lookup\/release-workflow","kind":"project","role":"project"},"set-up-env-02.sh":{"identifier":"set-up-env-02.sh","fileType":"sh","type":"file","highlights":[],"fileName":"Terminal.sh","syntax":"sh","content":["bundle init","","bundle install"]},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Setting-Up-Xcode-Cloud":{"type":"topic","kind":"project","identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Setting-Up-Xcode-Cloud","title":"How to Set Up Xcode Cloud","url":"\/tutorials\/zipfinder:-zip-code-lookup\/setting-up-xcode-cloud","role":"project","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through setting up the ZipFinder with Xcode Cloud and will guide you through the whole onboarding process to get you set up and ready to start automating your build distribution process!"}]},"new-workflow.png":{"identifier":"new-workflow.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/new-workflow.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/dev.polpiella.ZipFinder\/new-workflow~dark.png"}]},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Release-Workflow#Creating-the-bumpversion-lane-in-fastlane":{"type":"section","kind":"section","identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Release-Workflow#Creating-the-bumpversion-lane-in-fastlane","title":"Creating the `bump_version` lane in fastlane","url":"\/tutorials\/zipfinder:-zip-code-lookup\/release-workflow#Creating-the-bumpversion-lane-in-fastlane","role":"pseudoSymbol","abstract":[{"type":"text","text":"Archive and distribute the app for external testing whenever a commit is pushed to a branch with the pattern "},{"type":"codeVoice","code":"release\/{platform}\/{version}"},{"type":"text","text":". The workflow should automatically bump the version of the app based on the branch name, auto-translate the content and then submitting for external testing."}]},"manage-workflows.png":{"identifier":"manage-workflows.png","type":"image","alt":"","variants":[{"url":"\/images\/dev.polpiella.ZipFinder\/manage-workflows.png","traits":["1x","light"]},{"url":"\/images\/dev.polpiella.ZipFinder\/manage-workflows~dark.png","traits":["1x","dark"]}]},"Fastfile-01.rb":{"type":"file","identifier":"Fastfile-01.rb","content":["fastlane_require 'xcodeproj'"],"fileName":"Fastfile.rb","syntax":"rb","highlights":[],"fileType":"rb"},"doc://dev.polpiella.ZipFinder/tutorials/ZipFinder:-Zip-Code-Lookup/Setting-Up-Xcode-Cloud#Setting-up-Xcode-Cloud":{"kind":"section","identifier":"doc:\/\/dev.polpiella.ZipFinder\/tutorials\/ZipFinder:-Zip-Code-Lookup\/Setting-Up-Xcode-Cloud#Setting-up-Xcode-Cloud","role":"pseudoSymbol","type":"section","url":"\/tutorials\/zipfinder:-zip-code-lookup\/setting-up-xcode-cloud#Setting-up-Xcode-Cloud","title":"Setting up Xcode Cloud","abstract":[{"type":"text","text":"This tutorial guides you through setting up the ZipFinder with Xcode Cloud and will guide you through the whole onboarding process to get you set up and ready to start automating your build distribution process!"}]}}}